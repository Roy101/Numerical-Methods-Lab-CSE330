def test_8bit():
    count = 0
    data = ['00000000', '00000001', '00001001', '00010000',
            '00010001', '00011000', '00011011', '00100000',
            '00101101', '00110000', '00110101', '01000011',
            '01000000', '01010000', '01011100', '01100000',
            '01110111', '01110000', '10000000', '10000001',
            '11110001', '11110000', '10110001', '10111101',
            '11100000', '11101011', '11010000', '11000000']
    result = ['(0, 1)', '(1, 64)', '(9, 64)', '(1, 4)', '(17, 64)', '(3, 8)', '(27, 64)',
              '(1, 2)', '(29, 32)', '(1, 1)', '(21, 16)', '(19, 8)', '(2, 1)', '(4, 1)',
              '(7, 1)', '(8, 1)', 'nan', 'inf', '(0, 1)', '(-1, 64)', 'nan', '-inf',
              '(-17, 16)', '(-29, 16)', '(-8, 1)', '(-27, 2)', '(-4, 1)', '(-2, 1)']

    test = [Float8(x).val for x in data]

    for index in range(len(test)):
        d = test[index]
        try:

            test[index] = str(d.as_integer_ratio())
        except Exception:
            test[index] = str(d)
        if test[index] == result[index]:
            count += 1
        else:
            print(data[index], result[index], test[index])
    print(count, 'out of 28 is correct')


def test_16bit():
    count = 0
    data = ['0011100000000010', '0100000000000000', '1100000000000000', '0100010000000000',
            '1100010000000000', '0100100000000000', '1100100000000000', '0100101000000000',
            '1100101000000000', '0100110000000000', '1100110000000000', '0101101110000000',
            '0010010000000000', '0000000000000001', '0000011111111111', '0000100000000000',
            '0111011111111111', '0000000000000000', '1000000000000000', '0111100000000000',
            '1111100000000000', '0111100000000001', '0111110000000001', '0111111111111111',
            '0010101010101011', '0100010010010001', '0011100000000000', '0011100000000001']
    result = ['(1025, 1024)', '(2, 1)', '(-2, 1)', '(3, 1)', '(-3, 1)', '(4, 1)', '(-4, 1)',
              '(5, 1)', '(-5, 1)', '(6, 1)', '(-6, 1)', '(23, 1)', '(3, 16)', '(1, 131072)',
              '(2047, 131072)', '(1, 64)', '(4095, 16)', '(0, 1)', '(0, 1)', 'inf', '-inf',
              'nan', 'nan', 'nan', '(2731, 8192)', '(3217, 1024)', '(1, 1)', '(2049, 2048)']

    test = [Float16(x).val for x in data]
    for index in range(len(test)):
        d = test[index]
        try:
            test[index] = str(d.as_integer_ratio())
        except Exception:
            test[index] = str(d)
        if test[index] == result[index]:
            count += 1
        else:
            print(data[index], result[index], test[index])
    print(count, 'out of 28 is correct')


test_8bit()
test_16bit()